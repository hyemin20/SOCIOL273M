# Load ypsps data
ypsps <- read_csv('data/ypsps.csv')
# Load ypsps data
ypsps <- read_.csv('data/ypsps.csv')
# Load ypsps data
ypsps <- read.csv('data/ypsps.csv')
### Load ypsps data
ypsps <- read.csv('ypsps.csv')
head(ypsps)
# Generate a vector that randomly assigns each unit to treatment/control
set.seed(123) # 재현성을 위해 시드 설정
treatment <- sample(c("Treatment", "Control"), size = 100, replace = TRUE)
# Choose a baseline covariate (use dplyr for this)
parents <- sample(c("Yes", "No"), size = 100, replace = TRUE)
# Visualize the distribution by treatment/control (ggplot)
df <- data.frame(treatment, parents)
ggplot(df, aes(x = parents, fill = treatment)) +
geom_bar(position = "dodge", alpha = 0.8) +
labs(title = "Distribution of Covariate by Treatment/Control",
x = "Parents",
y = "Frequency") +
scale_fill_manual(values = c("Treatment" = "blue", "Control" = "red"))
### Start with clean state
gc(); rm(list=ls())
### Set working directory and data directory
work_dir <- c("C:/Users/OWNER/SOCIOL273M/project/Project_6")
### Call libraries
library(tidyverse); library(MatchIt); library(ggplot2)
install.packages('MatchIt')
### Load ypsps data
ypsps <- read.csv('ypsps.csv')
### Start with clean state
gc(); rm(list=ls())
### Set working directory and data directory
work_dir <- c("C:/Users/OWNER/SOCIOL273M/project/Project_6")
### Call libraries
library(tidyverse); library(MatchIt); library(ggplot2)
### Load ypsps data
ypsps <- read.csv('ypsps.csv')
head(ypsps)
# Generate a vector that randomly assigns each unit to treatment/control
set.seed(123) # 재현성을 위해 시드 설정
treatment <- sample(c("Treatment", "Control"), size = 100, replace = TRUE)
# Choose a baseline covariate (use dplyr for this)
parents <- sample(c("Yes", "No"), size = 100, replace = TRUE)
# Visualize the distribution by treatment/control (ggplot)
df <- data.frame(treatment, parents)
ggplot(df, aes(x = parents, fill = treatment)) +
geom_bar(position = "dodge", alpha = 0.8) +
labs(title = "Distribution of Covariate by Treatment/Control",
x = "Parents",
y = "Frequency") +
scale_fill_manual(values = c("Treatment" = "blue", "Control" = "red"))
# Simulate this 10,000 times (monte carlo simulation - see R Refresher for a hint)
simulations <- 10000
balance <- numeric(simulations)
for (i in 1:simulations) {
# 무작위로 각 단위(unit)를 처리 그룹 또는 대조 그룹에 할당하는 벡터 생성
treatment <- sample(c("Treatment", "Control"), size = 100, replace = TRUE)
# 가상의 이진 공변량 데이터 생성 (예: parents)
parents <- sample(c("Yes", "No"), size = 100, replace = TRUE)
# 처리/대조 그룹 간의 균형 계산
balance[i] <- sum(parents[treatment == "Treatment"] == "Yes") -
sum(parents[treatment == "Control"] == "Yes")
}
# 균형 시각화
ggplot() +
geom_histogram(aes(x = balance), bins = 30, fill = "skyblue", color = "black") +
labs(title = "Balance between Treatment and Control Groups",
x = "Difference in Yes Counts (Treatment - Control)",
y = "Frequency")
# Generate a vector that randomly assigns each unit to treatment/control
set.seed(123)
treatment <- sample(c("Treatment", "Control"), size = 100, replace = TRUE)
# Choose a baseline covariate (use dplyr for this)
parent_OwnHome <- sample(c("Yes", "No"), size = 100, replace = TRUE)
# Visualize the distribution by treatment/control (ggplot)
df <- data.frame(treatment, parent_OwnHome)
ggplot(df, aes(x = parent_OwnHome, fill = treatment)) +
geom_bar(position = "dodge", alpha = 0.8) +
labs(title = "Distribution of Covariate by Treatment/Control",
x = "parent_OwnHome",
y = "Frequency") +
scale_fill_manual(values = c("Treatment" = "blue", "Control" = "red"))
# Simulate this 10,000 times (monte carlo simulation - see R Refresher for a hint)
simulations <- 10000
balance <- numeric(simulations)
for (i in 1:simulations) {
# generate vector
treatment <- sample(c("Treatment", "Control"), size = 100, replace = TRUE)
# generate a binary covariate
parent_OwnHome <- sample(c("Yes", "No"), size = 100, replace = TRUE)
#generate a dataframe
sim_data <- data.frame(treatment, parent_OwnHome)
# 처리/대조 그룹 간의 균형 계산
balance[i] <- sum(parent_OwnHome[treatment == "Treatment"] == "Yes") -
sum(parent_OwnHome[treatment == "Control"] == "Yes")
}
# 균형 시각화
ggplot() +
geom_histogram(aes(x = balance), bins = 30, fill = "skyblue", color = "black") +
labs(title = "Balance between Treatment and Control Groups",
x = "Difference in Yes Counts (Treatment - Control)",
y = "Frequency")
# Generate a vector that randomly assigns each unit to treatment/control
set.seed(123)
treatment <- sample(c("Treatment", "Control"), size = 100, replace = TRUE)
treatment
# Generate a vector that randomly assigns each unit to treatment/control
set.seed(123)
treatment <- sample(c("Treatment", "Control"), size = 100, replace = TRUE)
# Choose a baseline covariate (use dplyr for this)
parent_OwnHome <- sample(c("Yes", "No"), size = 100, replace = TRUE)
# Visualize the distribution by treatment/control (ggplot)
df <- data.frame(treatment, parent_OwnHome)
ggplot(df, aes(x = parent_OwnHome, fill = treatment)) +
geom_bar(position = "dodge", alpha = 0.8) +
labs(title = "Distribution of Covariate by Treatment/Control",
x = "parent_OwnHome",
y = "Frequency") +
scale_fill_manual(values = c("Treatment" = "blue", "Control" = "red"))
# Simulate this 10,000 times (monte carlo simulation - see R Refresher for a hint)
simulations <- 10000
balance <- numeric(simulations)
for (i in 1:simulations) {
# generate vector
treatment <- sample(c("Treatment", "Control"), size = 100, replace = TRUE)
# generate a binary covariate
parent_OwnHome <- sample(c("Yes", "No"), size = 100, replace = TRUE)
#generate a dataframe
sim_data <- data.frame(treatment, parent_OwnHome)
# 처리/대조 그룹 간의 균형 계산
balance[i] <- sum(parent_OwnHome[treatment == "Treatment"] == "Yes") -
sum(parent_OwnHome[treatment == "Control"] == "Yes")
}
# 균형 시각화
ggplot() +
geom_histogram(aes(x = balance), bins = 30, fill = "skyblue", color = "black") +
labs(title = "Balance between Treatment and Control Groups",
x = "Difference in Yes Counts (Treatment - Control)",
y = "Frequency")
# Generate a vector that randomly assigns each unit to treatment/control
set.seed(123)
treatment <- sample(c("Treatment", "Control"), size = 100, replace = TRUE)
# Choose a baseline covariate (use dplyr for this)
parent_OwnHome <- ypsps$parent_OwnHome
# Visualize the distribution by treatment/control (ggplot)
df <- data.frame(treatment, parent_OwnHome)
# Generate a vector that randomly assigns each unit to treatment/control
set.seed(123)
treatment <- sample(c("Treatment", "Control"), size = nrow(ypsps), replace = TRUE)
treatment
# Choose a baseline covariate (use dplyr for this)
p_Home <- ypsps$parent_OwnHome
# Visualize the distribution by treatment/control (ggplot)
df <- data.frame(treatment, p_Home)
ggplot(df, aes(x = p_Home, fill = treatment)) +
geom_bar(position = "dodge", alpha = 0.8) +
labs(title = "Distribution of Covariate by Treatment/Control",
x = "parent_OwnHome",
y = "Frequency") +
scale_fill_manual(values = c("Treatment" = "blue", "Control" = "red"))
# Simulate this 10,000 times (monte carlo simulation - see R Refresher for a hint)
simulations <- 10000
balance <- numeric(simulations)
for (i in 1:simulations) {
# generate vector
treatment <- sample(c("Treatment", "Control"), size = 100, replace = TRUE)
# generate a binary covariate
p_Home <- ypsps$parent_OwnHome
#generate a dataframe
sim_data <- data.frame(treatment, p_Home)
# 처리/대조 그룹 간의 균형 계산
balance[i] <- sum(p_Home[treatment == "Treatment"] == "Yes") -
sum(p_Home[treatment == "Control"] == "Yes")
}
# generate vector
treatment <- sample(c("Treatment", "Control"), size = nrow(ypsps), replace = TRUE)
for (i in 1:simulations) {
# generate vector
treatment <- sample(c("Treatment", "Control"), size = nrow(ypsps), replace = TRUE)
# generate a binary covariate
p_Home <- ypsps$parent_OwnHome
#generate a dataframe
sim_data <- data.frame(treatment, p_Home)
# 처리/대조 그룹 간의 균형 계산
balance[i] <- sum(p_Home[treatment == "Treatment"] == "Yes") -
sum(p_Home[treatment == "Control"] == "Yes")
}
# 균형 시각화
ggplot() +
geom_histogram(aes(x = balance), bins = 30, fill = "skyblue", color = "black") +
labs(title = "Balance between Treatment and Control Groups",
x = "Difference in Yes Counts (Treatment - Control)",
y = "Frequency")
# Simulate this 10,000 times (monte carlo simulation - see R Refresher for a hint)
simulations <- 10000
balance <- numeric(simulations)
for (i in 1:simulations) {
# 무작위로 각 단위(unit)를 처리 그룹 또는 대조 그룹에 할당하는 벡터 생성
treatment <- sample(c("Treatment", "Control"), size = nrow(ypsps), replace = TRUE)
# 가상의 이진 공변량 데이터 생성 (여기서는 ypsps$parent_OwnHome)
p_Home <- ypsps$parent_OwnHome
# 데이터 프레임에 추가
sim_data <- data.frame(treatment, p_Home)
# 처리/대조 그룹 간의 균형 계산
balance[i] <- sum(p_Home[treatment == "Treatment"] == "Yes") -
sum(p_Home[treatment == "Control"] == "Yes")
}
# 균형 시각화
ggplot() +
geom_histogram(aes(x = balance), bins = 30, fill = "skyblue", color = "black") +
labs(title = "Balance between Treatment and Control Groups",
x = "Difference in Yes Counts (Treatment - Control)",
y = "Frequency")
# Visualize the distribution by treatment/control (ggplot)
df <- data.frame(treatment, p_Home)
ggplot(data, aes(x = p_Home, fill = treatment)) +
geom_bar(position = "dodge", alpha = 0.8) +
labs(title = "Distribution of Parent_OwnHome by Treatment/Control",
x = "Parent Owns Home",
y = "Frequency") +
scale_fill_manual(values = c("Treatment" = "blue", "Control" = "red"))
ggplot(df, aes(x = p_Home, fill = treatment)) +
geom_bar(position = "dodge", alpha = 0.8) +
labs(title = "Distribution of Parent_OwnHome by Treatment/Control",
x = "Parent Owns Home",
y = "Frequency") +
scale_fill_manual(values = c("Treatment" = "blue", "Control" = "red"))
# Generate a vector that randomly assigns each unit to treatment/control
set.seed(123)
### Start with clean state
gc(); rm(list=ls())
### Set working directory and data directory
work_dir <- c("C:/Users/OWNER/SOCIOL273M/project/Project_6")
### Call libraries
library(tidyverse); library(MatchIt); library(ggplot2)
### Load ypsps data
ypsps <- read.csv('ypsps.csv')
head(ypsps)
# Generate a vector that randomly assigns each unit to treatment/control
set.seed(123)
treatment <- sample(c("Treatment", "Control"), size = nrow(ypsps), replace = TRUE)
ypsps <- ypsps %>% mutate(treatment = treatment)
# Visualize the distribution by treatment/control (ggplot)
df <- data.frame(ypsps$treatment, ypsps$parent_OwnHome)
ggplot(df, aes(x = parent_OwnHome, fill = treatment)) +
geom_bar(position = "dodge", alpha = 0.8) +
labs(title = "Distribution of Parent_OwnHome by Treatment/Control",
x = "Parent Owns Home",
y = "Frequency") +
scale_fill_manual(values = c("Treatment" = "blue", "Control" = "red"))
df
ggplot(df, aes(x = ypsps.parent_OwnHome, fill = ypsps.treatment)) +
geom_bar(position = "dodge", alpha = 0.8) +
labs(title = "Distribution of Parent_OwnHome by Treatment/Control",
x = "Parent Owns Home",
y = "Frequency") +
scale_fill_manual(values = c("Treatment" = "blue", "Control" = "red"))
# Simulate this 10,000 times (monte carlo simulation - see R Refresher for a hint)
simulations <- 10000
balance <- numeric(simulations)
for (i in 1:simulations) {
balance[i] <- sum(ypsps.parent_OwnHome[ypsps.treatment == "Treatment"] == "Yes") -
sum(ypsps.parent_OwnHome[ypsps.treatment == "Control"] == "Yes")
}
df <- data.frame(ypsps$treatment, ypsps$parent_OwnHome)
for (i in 1:simulations) {
df <- data.frame(ypsps$treatment, ypsps$parent_OwnHome)
balance[i] <- sum(ypsps.parent_OwnHome[ypsps.treatment == "Treatment"] == "Yes") -
sum(ypsps.parent_OwnHome[ypsps.treatment == "Control"] == "Yes")
}
sim_balance <- numeric(10000)
# 10,000번의 시뮬레이션 반복
for (i in 1:10000) {
# 1. 무작위로 각 단위(unit)를 처리 그룹 또는 대조 그룹에 할당하는 벡터 생성
treatment <- sample(c("Treatment", "Control"), size = nrow(ypsps), replace = TRUE)
# 2. 선택한 이진 공변량 선택 (여기서는 ypsps$parent_OwnHome)
baseline_covariate <- ypsps$parent_OwnHome
# 데이터 프레임에 추가
data <- data.frame(treatment, baseline_covariate)
# 3. 시각화: 처리 및 대조 그룹에 따른 공변량 분포 확인
# (이번 시뮬레이션에서는 시각화는 생략)
# 4. 처리/대조 균형 계산
treatment_balance <- sum(baseline_covariate[treatment == "Treatment"] == "Yes") -
sum(baseline_covariate[treatment == "Control"] == "Yes")
# 균형 결과를 시뮬레이션 결과 벡터에 저장
sim_balance[i] <- treatment_balance
}
# 10,000번의 시뮬레이션 반복
for (i in 1:10000) {
# 1. 무작위로 각 단위(unit)를 처리 그룹 또는 대조 그룹에 할당하는 벡터 생성
treatment <- sample(c("Treatment", "Control"), size = nrow(ypsps), replace = TRUE)
# 2. 선택한 이진 공변량 선택 (여기서는 ypsps$parent_OwnHome)
baseline_covariate <- ypsps$parent_OwnHome
# 데이터 프레임에 추가
data <- data.frame(treatment, baseline_covariate)
# 3. 시각화: 처리 및 대조 그룹에 따른 공변량 분포 확인
# (이번 시뮬레이션에서는 시각화는 생략)
# 4. 처리/대조 균형 계산
treatment_balance <- sum(baseline_covariate[treatment == "Treatment"] == "Yes") -
sum(baseline_covariate[treatment == "Control"] == "Yes")
# 균형 결과를 시뮬레이션 결과 벡터에 저장
sim_balance[i] <- treatment_balance
}
# 시각화: 처리/대조 균형 분포
ggplot() +
geom_histogram(aes(x = sim_balance), bins = 30, fill = "skyblue", color = "black") +
labs(title = "Distribution of Treatment/Control Balance across Simulations",
x = "Difference in Yes Counts (Treatment - Control)",
y = "Frequency")
# Simulate this 10,000 times (monte carlo simulation - see R Refresher for a hint)
simulations <- 10000
balance <- numeric(simulations)
for (i in 1:simulations) {
df <- data.frame(ypsps$treatment, ypsps$parent_OwnHome)
balance[i] <- sum(ypsps.parent_OwnHome[ypsps.treatment == "Treatment"] == "Yes") -
sum(ypsps.parent_OwnHome[ypsps.treatment == "Control"] == "Yes")
}
df
# Simulate this 10,000 times (monte carlo simulation - see R Refresher for a hint)
simulate_data <- function() {
set.seed(NULL)
treatment <- sample(c("Treatment", "Control"), size = nrow(ypsps), replace = TRUE)
baseline_covariate <- ypsps$parent_OwnHome
data <- data.frame(treatment, baseline_covariate)
treatment_table <- table(data$treatment)
return(treatment_table)
}
# 시뮬레이션 실행 및 결과 저장
sim_results <- replicate(10000, simulate_data())
# 시뮬레이션 실행 및 결과 저장
sim_results <- replicate(10000, simulate_data())
# 결과를 데이터 프레임으로 변환
sim_results_df <- as.data.frame(sim_results)
# 시각화: 시뮬레이션 결과에 대한 히스토그램
ggplot(sim_results_df, aes(x = factor(Treatment), y = Freq)) +
geom_bar(stat = "identity", position = "dodge", fill = "skyblue", color = "black") +
labs(title = "Distribution of Treatment/Control Across Simulations",
x = "Group",
y = "Frequency")
# Simulate this 10,000 times (monte carlo simulation - see R Refresher for a hint)
simulate_data <- function() {
set.seed(NULL)
treatment <- sample(c("Treatment", "Control"), size = nrow(ypsps), replace = TRUE)
baseline_covariate <- ypsps$parent_OwnHome
data <- data.frame(treatment, baseline_covariate)
treatment_table <- table(data$treatment)
return(treatment_table)
}
# 시뮬레이션 실행 및 결과 저장
sim_results <- replicate(10000, simulate_data())
# 시뮬레이션 실행 및 결과 저장
sim_results <- replicate(10000, simulate_data())
# 결과를 데이터 프레임으로 변환
sim_results_df <- as.data.frame(sim_results)
# 시각화: 시뮬레이션 결과에 대한 히스토그램
ggplot(sim_results_df, aes(x = factor(Treatment), y = Freq)) +
geom_bar(stat = "identity", position = "dodge", fill = "skyblue", color = "black") +
labs(title = "Distribution of Treatment/Control Across Simulations",
x = "Group",
y = "Frequency")
sim_results_df
